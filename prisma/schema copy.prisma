generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id           Int              @id @default(autoincrement())
  name         String
  priority     TaskPriority
  projectId    Int
  status       TaskStatus
  Project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  persons      TaskAssignment[]
  Notification Notification[]

  @@index([projectId])
}

model Person {
  id            Int                     @id @default(autoincrement())
  email         String                  @unique
  name          String                  @unique
  avatar        String?
  password      String
  Project       Project[]
  ProjectPerson ProjectPerson[]
  tasks         TaskAssignment[]
  notifications NotificationRecipient[] // Add this to establish the relation

  @@index([email])
}

model TaskAssignment {
  taskId   Int
  personId Int
  id       Int    @id @default(autoincrement())
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([taskId, personId])
  @@index([personId])
  @@index([taskId])
}

model Notification {
  id         Int                     @id @default(autoincrement())
  message    String
  projectId  Int                     // Foreign key for related project
  taskId     Int?                    // Optional foreign key for related task
  createdAt  DateTime                @default(now())
  recipients NotificationRecipient[] 

  project    Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Cascade deletion
  task       Task?                   @relation(fields: [taskId], references: [id])

  @@index([projectId])
  @@index([taskId])
  @@index([createdAt])
}

model NotificationRecipient {
  id             Int          @id @default(autoincrement())
  notificationId Int // Foreign key for the notification
  personId       Int // Foreign key for the person receiving the notification
  isRead         Boolean      @default(false)
  notification   Notification @relation(fields: [notificationId], references: [id])
  person         Person       @relation(fields: [personId], references: [id])

  @@unique([notificationId, personId]) // Prevent duplicate notifications to the same person
  @@index([personId])
  @@index([notificationId])
  @@index([isRead])
}

model Project {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  description      String?
  projectManagerId Int
  Person           Person          @relation(fields: [projectManagerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ProjectPerson    ProjectPerson[]
  Task             Task[]
  Notification     Notification[]

  @@index([projectManagerId])
}

model ProjectPerson {
  id        Int     @id @default(autoincrement())
  projectId Int
  personId  Int
  Person    Person  @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([projectId, personId])
  @@index([projectId])
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}
